<div class="content">
        <div class="intro">
            <p>Recentemente me interessei por linguagens de programação com paradigmas funcionais, como Common Lisp e Haskell, e isso me levou a estudar cálculo lambda, que é o sistema formal teórico que está por trás dessas linguagens, além de integrar linguagens multi-paradigmas como Python e JavaScript. Este modelo foi proposto por Alonzo Church:</p>
        </div>
        <div class="alonzo-section">
            <img src="https://i.imgur.com/GCzNqxG.jpg" alt="Imagem de Alonzo Church" class="alonzo-image">
            <div class="alonzo-text">
                <h2>Alonzo Church (1903 – 1995):</h2>
                <p>Matemático estado-unidense, professor na universidade de Princeton onde foi orientador de doutorado de Alan Turing. Ao colocar funções matemáticas em perspectiva com a computação criou o Cálculo Lambda.</p>
            </div>
        </div>
	<div>
		<h2>Cálculo Lambda Vs Máquina de Turing</h2>
		<p>O Cálculo Lambda como vimos foi desenvolvido por Alonzo Church e a Máquian de Turing, sendo a máquina que você está utilizando para ler esse blog, foi inventado posteriormente por Alan Turing. E com o avanço do estudo das funções computáveis, foi descoberto que estes sistemas são formalmente equivalentes, no sentido de que qualquer programa de computador escrito para uma máquina de Turing pode ser traduzido para o Cálculo Lambda, isso se da pelo Teorema de Church-Turing.</p>
		<h2>Termos em Cálculo Lambda</h2>
		<p></p>

		<div class="lambda-expression" data-content="Exemplo 1:">
			λx.(x + 1)
		</div>
		
		<div class="lambda-expression" data-content="Exemplo 2:">
			λx.λy.(x + y)
		</div>

	</div>

</div>
